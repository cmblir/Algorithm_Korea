def solution(board = [[0,1,1,1],[1,1,1,1],[1,1,1,1],[0,0,1,0]]):
    # DP 로 해결하기
    dp = [[0] * len(board[0]) for _ in range(len(board))]
    # 보드의 크기에서 1차원 행렬의 숫자만큼 0으로 가득찬 다차원 행렬 만들기
    dp[0] = board[0] # 맨 윗 행렬로 바꾸기
    for i in range(1, len(board)): # 이외 행랼 채워주기
        dp[i][0] = board[i][0] # 행렬의 첫번째 값 변경해주기
    
    # 2중 반복문
    for i in range(1, len(board)):
        for j in range(1, len(board[0])):
            if board[i][j] == 1: # 만약 위치가 1이라면
                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1
                # dp 위치에서 만들수 있는 가장 큰 사각형을 계산한다

    answer = 0
    for i in range(len(board)):
        tmp = max(dp[i]) # DP로 계산한 가장 큰 값을 도출
        answer = max(answer, tmp) # 정답과 비교해서 더 큰 값을 넣는다.
    return answer ** 2 # 정사각의 넓이는 한변의 길이의 제곱